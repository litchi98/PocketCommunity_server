<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.litchi.pocketcommunity.dao.BuildingMapper">
  <resultMap id="BaseResultMap" type="com.litchi.pocketcommunity.bean.Building">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="building" jdbcType="INTEGER" property="building" />
    <result column="unit" jdbcType="INTEGER" property="unit" />
    <result column="room" jdbcType="INTEGER" property="room" />
    <result column="area" jdbcType="INTEGER" property="area" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="unit_price" jdbcType="DECIMAL" property="unitPrice" />
    <result column="transaction_time" jdbcType="TIMESTAMP" property="transactionTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, building, unit, room, area, user_id, unit_price, transaction_time
  </sql>
  <sql id="Base_Column_List_With_Name">
    b.id, b.building, b.unit, b.room, b.area, b.user_id, b.unit_price, b.transaction_time, m.name userName
  </sql>
  <select id="selectByExample" parameterType="com.litchi.pocketcommunity.bean.BuildingExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from building
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.litchi.pocketcommunity.bean.BuildingKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from building
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <select id="selectByPrimaryKeyWithName" parameterType="com.litchi.pocketcommunity.bean.BuildingKey" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List_With_Name" />
    from building b left join m_user m on b.user_id=m.id
    where b.id like #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.litchi.pocketcommunity.bean.BuildingKey">
    delete from building
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.litchi.pocketcommunity.bean.BuildingExample">
    delete from building
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.litchi.pocketcommunity.bean.Building">
    insert into building (id, building, unit, 
      room, area, user_id, 
      unit_price, transaction_time)
    values (#{id,jdbcType=VARCHAR}, #{building,jdbcType=INTEGER}, #{unit,jdbcType=INTEGER}, 
      #{room,jdbcType=INTEGER}, #{area,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{unitPrice,jdbcType=DECIMAL}, #{transactionTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.litchi.pocketcommunity.bean.Building">
    insert into building
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="building != null">
        building,
      </if>
      <if test="unit != null">
        unit,
      </if>
      <if test="room != null">
        room,
      </if>
      <if test="area != null">
        area,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="unitPrice != null">
        unit_price,
      </if>
      <if test="transactionTime != null">
        transaction_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="building != null">
        #{building,jdbcType=INTEGER},
      </if>
      <if test="unit != null">
        #{unit,jdbcType=INTEGER},
      </if>
      <if test="room != null">
        #{room,jdbcType=INTEGER},
      </if>
      <if test="area != null">
        #{area,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="unitPrice != null">
        #{unitPrice,jdbcType=DECIMAL},
      </if>
      <if test="transactionTime != null">
        #{transactionTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.litchi.pocketcommunity.bean.BuildingExample" resultType="java.lang.Long">
    select count(*) from building
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update building
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.building != null">
        building = #{record.building,jdbcType=INTEGER},
      </if>
      <if test="record.unit != null">
        unit = #{record.unit,jdbcType=INTEGER},
      </if>
      <if test="record.room != null">
        room = #{record.room,jdbcType=INTEGER},
      </if>
      <if test="record.area != null">
        area = #{record.area,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.unitPrice != null">
        unit_price = #{record.unitPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.transactionTime != null">
        transaction_time = #{record.transactionTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update building
    set id = #{record.id,jdbcType=VARCHAR},
      building = #{record.building,jdbcType=INTEGER},
      unit = #{record.unit,jdbcType=INTEGER},
      room = #{record.room,jdbcType=INTEGER},
      area = #{record.area,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      unit_price = #{record.unitPrice,jdbcType=DECIMAL},
      transaction_time = #{record.transactionTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.litchi.pocketcommunity.bean.Building">
    update building
    <set>
      <if test="building != null">
        building = #{building,jdbcType=INTEGER},
      </if>
      <if test="unit != null">
        unit = #{unit,jdbcType=INTEGER},
      </if>
      <if test="room != null">
        room = #{room,jdbcType=INTEGER},
      </if>
      <if test="area != null">
        area = #{area,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="unitPrice != null">
        unit_price = #{unitPrice,jdbcType=DECIMAL},
      </if>
      <if test="transactionTime != null">
        transaction_time = #{transactionTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.litchi.pocketcommunity.bean.Building">
    update building
    set building = #{building,jdbcType=INTEGER},
      unit = #{unit,jdbcType=INTEGER},
      room = #{room,jdbcType=INTEGER},
      area = #{area,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      unit_price = #{unitPrice,jdbcType=DECIMAL},
      transaction_time = #{transactionTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>