<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.litchi.pocketcommunity.dao.WorkOrderMapper">
  <resultMap id="BaseResultMap" type="com.litchi.pocketcommunity.bean.WorkOrder">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="proposer_id" jdbcType="INTEGER" property="proposerId" />
    <result column="current_processor_id" jdbcType="INTEGER" property="currentProcessorId" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="propose_date" jdbcType="DATE" property="proposeDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, proposer_id, current_processor_id, state, content, propose_date
  </sql>
  <select id="selectByExample" parameterType="com.litchi.pocketcommunity.bean.WorkOrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from work_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="com.litchi.pocketcommunity.bean.WorkOrderKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from work_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.litchi.pocketcommunity.bean.WorkOrderKey">
    delete from work_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.litchi.pocketcommunity.bean.WorkOrderExample">
    delete from work_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.litchi.pocketcommunity.bean.WorkOrder">
    insert into work_order (id, proposer_id, current_processor_id, 
      state, content, propose_date
      )
    values (#{id,jdbcType=INTEGER}, #{proposerId,jdbcType=INTEGER}, #{currentProcessorId,jdbcType=INTEGER}, 
      #{state,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, #{proposeDate,jdbcType=DATE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.litchi.pocketcommunity.bean.WorkOrder">
    insert into work_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="proposerId != null">
        proposer_id,
      </if>
      <if test="currentProcessorId != null">
        current_processor_id,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="proposeDate != null">
        propose_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="proposerId != null">
        #{proposerId,jdbcType=INTEGER},
      </if>
      <if test="currentProcessorId != null">
        #{currentProcessorId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="proposeDate != null">
        #{proposeDate,jdbcType=DATE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.litchi.pocketcommunity.bean.WorkOrderExample" resultType="java.lang.Long">
    select count(*) from work_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update work_order
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.proposerId != null">
        proposer_id = #{record.proposerId,jdbcType=INTEGER},
      </if>
      <if test="record.currentProcessorId != null">
        current_processor_id = #{record.currentProcessorId,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.proposeDate != null">
        propose_date = #{record.proposeDate,jdbcType=DATE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update work_order
    set id = #{record.id,jdbcType=INTEGER},
      proposer_id = #{record.proposerId,jdbcType=INTEGER},
      current_processor_id = #{record.currentProcessorId,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      content = #{record.content,jdbcType=VARCHAR},
      propose_date = #{record.proposeDate,jdbcType=DATE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.litchi.pocketcommunity.bean.WorkOrder">
    update work_order
    <set>
      <if test="proposerId != null">
        proposer_id = #{proposerId,jdbcType=INTEGER},
      </if>
      <if test="currentProcessorId != null">
        current_processor_id = #{currentProcessorId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="proposeDate != null">
        propose_date = #{proposeDate,jdbcType=DATE},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.litchi.pocketcommunity.bean.WorkOrder">
    update work_order
    set proposer_id = #{proposerId,jdbcType=INTEGER},
      current_processor_id = #{currentProcessorId,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      propose_date = #{proposeDate,jdbcType=DATE}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>